---

language: generic
python: "2.7"

matrix:
  include:
    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.6 using APT"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.7.0' FROM_PACKAGE_MANAGER='yes'
    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.7 using APT"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.8.0' FROM_PACKAGE_MANAGER='yes'
    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.8 using APT"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.9.0' FROM_PACKAGE_MANAGER='yes'

    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.6 using Archive"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.7.0' FROM_PACKAGE_MANAGER='no'
    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.7 using Archive"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.8.0' FROM_PACKAGE_MANAGER='no'
    - name: "Ubuntu 16.04 (Xenial) with Ansible 2.8 using Archive"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.9.0' FROM_PACKAGE_MANAGER='no'

    - name: "macOS 10.13 (High Sierra) with Xcode 10.1"
      os: osx
      osx_image: xcode10.1
    - name: "macOS 10.14 (Mojave) with Xcode 10.2.1"
      os: osx
      osx_image: xcode10.2

# Install Ansible and Python development packages
addons:
  apt:
    packages:
      - python-pip
      - python-dev
  homebrew:
    packages:
      - ansible
      - pre-commit
    update: true

cache:
  directories:
    - $HOME/.cache/pre-commit/

branches:
  only:
    - master
    - develop
    - /^feature\/.*$/
    - /^bugfix\/.*$/
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

before_cache:
  - rm -f $HOME/.cache/pre-commit/pre-commit.log

before_install:
  # Update Homebrew before installation
  - >
    if [[ "$BREW_UPGRADE" == "yes" ]]; then
      brew update
    fi

install:
  # Install Ansible with Homebrew on OSX
  - >
    if [[ "$BREW_UPGRADE" == "yes" ]]; then
      brew upgrade ansible
    fi

  # upgrade pre-commit with Homebrew
  - >
    if [[ "$BREW_UPGRADE" == "yes" ]]; then
      brew upgrade pre-commit
    fi

  # Install Ansible with pip
  - >
    if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then
      pip install --user ansible${ANSIBLE_VERSION}
    fi

  # Install pre-commit with pip
  - >
    if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then
      pip install --user pre-commit
    fi

  # Check Ansible version
  - ansible --version

  # Create ansible.cfg with correct roles_path
  - printf '[defaults]\nroles_path=../\n' > ansible.cfg

before_script:
  # https://github.com/travis-ci/travis-ci/issues/6307
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then rvm get head || true; fi

script:

  # Run pre-commit hooks
  - pre-commit run -a || travis_terminate 1

  # Basic role syntax check
  - ansible-playbook tests/test.yml -i tests/inventory --syntax-check

  # Test role run
  - >
    if [[ "$FROM_PACKAGE_MANAGER" == "yes" ]]; then
      ansible-playbook tests/test.yml -i tests/inventory --connection=local \
        -e "'gcloud_install_from_package_manager':'True'"
    else
      ansible-playbook tests/test.yml -i tests/inventory --connection=local \
        -e "'gcloud_install_from_package_manager':'False'"
    fi

  # Test idempotence
  - >
    if [[ "$FROM_PACKAGE_MANAGER" == "yes" ]]; then
      ansible-playbook tests/test.yml -i tests/inventory --connection=local \
      -e "'gcloud_install_from_package_manager':'True'" \
        | grep -q 'changed=0.*failed=0' \
        && (echo 'Idempotence test: pass' && exit 0) \
        || (echo 'Idempotence test: fail' && exit 1)
    else
      ansible-playbook tests/test.yml -i tests/inventory --connection=local \
      -e "'gcloud_install_from_package_manager':'False'" \
        | grep -q 'changed=0.*failed=0' \
        && (echo 'Idempotence test: pass' && exit 0) \
        || (echo 'Idempotence test: fail' && exit 1)
    fi

notifications:
  webhooks:
    - https://galaxy.ansible.com/api/v1/notifications/
