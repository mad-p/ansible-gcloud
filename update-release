#!/usr/bin/env bash

###
# Print error into STDERR
###
error() {
    echo "$@" 1>&2
}

###
# Get latest release Google Cloud SDK relaase
###
latest_cloud_sdk_release() {
    local os=$1
    local arch=$2
    local bucket="cloud-sdk-release"
    local prefix="google-cloud-sdk-"

    [ -z "${os}" ] && { error "OS missing"; return 1; }
    [ -z "${arch}" ] && { error "architecture missing"; return 1; }

    os=$(echo ${os} | awk '{print tolower($0)}')
    if [ "${os}" == "darwin" ] || [ "${os}" == "linux" ]; then
      local suffix="-${os}-${arch}.tar.gz"
    else
      error "Unsupported OS: ${os}"
      return 1
    fi

    gsutil ls "gs://${bucket}/${prefix}*${suffix}" | \
      sed "s/gs:\/\/${bucket}\/${prefix}//g" | \
      sed "s/${suffix}//g" | \
      sort -nr | head -1
}

###
# Update version
###
update_version() {
    local os=$1
    local release=$2
    local checksum=""
    update_ansible_vars ${os} ${release}
}

###
# Update version and checksum variables
###
update_ansible_vars() {
    local os=$1
    local version=$2

    [ -z "${version}" ] && {
        error "Version missing"; return 1;
    }

    # Ansible vars file to update
    if [ "${os}" == "darwin" ] || [ "${os}" == "Darwin" ]; then
        local ansible_os="Darwin"
    fi
    [ -z "${ansible_os}" ] && {
        error "Unsupported OS ${os}"; return 1;
    }

    local vars_file=vars/${ansible_os}.yml

    # Update variables
    echo "Updating variables in ${vars_file}"
    sed -i.save -r "s/^(gcloud_version):.*$/\1: \"${version}\"/" \
        ${vars_file}
    rm ${vars_file}.save
}

###
# Update versions
###
update_versions() {
  CLOUD_SDK_RELEASE=$(latest_cloud_sdk_release darwin x86_64)
  echo "Latest Google Cloud SDK release is ${CLOUD_SDK_RELEASE}"
  update_version Darwin ${CLOUD_SDK_RELEASE}
}

set -e

update_versions
